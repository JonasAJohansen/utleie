# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- When fixing Next.js API routes, make targeted edits to fix type errors rather than deleting and recreating files.
- In Next.js 15, route handlers with dynamic segments need to be properly typed with specific parameter formats.
- In Next.js 15, dynamic route parameters must be awaited before accessing their properties.
- When using SQL in TypeScript, ensure column names match exactly with the database schema.
- After updating npm packages (especially auth packages like Clerk), clear build cache before rebuilding.
- In Next.js 15, there are two approaches to handle dynamic route parameters:
  1. Using async/await: `const { id } = await params;` in an async component
  2. Using React's `use` hook: `const { id } = use(params);` in a non-async component
- In Next.js 15 API route handlers, only HTTP methods (GET, POST, etc.) should be exported directly. Helper functions should be moved to separate utility files.
- When handling errors in TypeScript, properly type-check or type-cast catch parameters (which are of type `unknown` by default) before accessing their properties.
- When using arrays with PostgreSQL in @vercel/postgres, use the sql.array() helper function: `ANY(${sql.array(myArray, 'text')})` instead of directly passing arrays to SQL template literals.
- When using Clerk's getAuth() function in Next.js 15, always pass the request object as an argument: `getAuth(request)`.
- In framer-motion v11+, neither `MotionProps` nor `HTMLMotionProps` are exported. Instead, define a custom interface with common motion properties and use an index signature for additional props: `[key: string]: any`.
- When working with SQL results in TypeScript, always check for null before accessing rowCount (e.g., `if (result.rowCount && result.rowCount > 0)`) to avoid null reference errors.
- For framer-motion event handlers like onDragEnd, create custom interfaces for the event parameters (e.g., `DragInfo` with offset and velocity properties) since types like PanInfo aren't directly exported.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- For Next.js 15 API route handlers, use specific type definitions for dynamic route parameters to satisfy the constraint 'ParamCheck<RouteContext>'
- In Next.js 15, dynamic route parameters need to follow a specific TypeScript interface structure to work with the middleware and routing system
- For Next.js 15 API routes with dynamic segments, avoid complex interfaces and use the built-in context parameter directly
- When using react-datepicker with selectsRange property, the onChange handler should accept [Date, Date] array type
- For Next.js components using useSearchParams or other navigation hooks, always wrap them in a Suspense boundary
- When working with lucide-react icons, verify the icon names in the current version as they may change between updates (e.g., Bicycle replaced with Bike)
- In schema-dts (JSON-LD schema), use '@id' format for reference values like 'businessFunction' and 'itemCondition'
- Remove the delete of L.Icon.Default.prototype._getIconUrl in Leaflet initialization as it's not needed in newer versions

# Scratchpad

## Previous Task: Implement Rental Request Functionality
[This task is now complete]

## Current Task: Fix Build and Database Issues

### Problem Description
There are several issues with the application's build and database access:

1. Build error: "Cannot find module './vendor-chunks/@clerk.js'"
2. Database connection error: "NeonDbError: Error connecting to database: fetch failed"
3. Next.js dynamic params issue: "params.id should be awaited before accessing its properties"
4. SQL error in rental-requests route: "column rr.message does not exist"
5. Type error in API routes: "Type does not satisfy the constraint 'ParamCheck<RouteContext>'"
6. WebSocket route error: Functions exported from route handler aren't allowed
7. TypeScript errors:
   - Missing `id` property in `ListingPageClient.tsx`
   - `unknown` type error in `map-search/route.ts`
   - Missing array handling in mark-read/route.ts
   - Implicit `any` type in event handlers

### Implementation Plan
[X] Fix Clerk.js module error
  [X] Update Clerk.js package (already done - now 6.12.2)
  [X] Clear .next build cache (already done)
  [X] Update any incompatible Clerk code if necessary

[X] Fix Next.js params issue in listings/[id]/page.tsx
  [X] Update code to properly await params before accessing properties

[X] Fix API route parameter typings (Updated plan with new approach)
  [X] Update app/api/rental-requests/[requestId]/approve/route.ts
  [X] Update app/api/rental-requests/[requestId]/cancel/route.ts
  [X] Update app/api/rental-requests/[requestId]/route.ts

[X] Fix WebSocket route error
  [X] Move helper functions from route file to lib/websocket.ts
  [X] Update the route file to use the imported functions
  [X] Update getAuth() call to pass request parameter

[ ] Fix database connection issue
  [ ] Check database connection settings
  [ ] Ensure environment variables are properly set
  [ ] Verify Neon DB connection is accessible

[X] Fix rental-requests API route SQL error
  [X] Check rental_requests table schema
  [X] Add missing "message" column to database
  [X] Update SQL query to handle missing column (no changes needed as column now exists)

[X] Fix TypeScript errors
  [X] Add missing `id` property in ListingPageClient.tsx
  [X] Fix unknown type error handling in map-search/route.ts
  [X] Fix null checks for rowCount in SQL results
  [X] Update framer-motion types in AnimatedSection.tsx
  [X] Add explicit types to event handlers in ListingGallery.tsx
  [X] Fix circular dependency between ws route and websocket.ts
  [X] Fix schema-dts types in ListingSchema.tsx
  [X] Fix DateRangePicker onChange handler typing
  [X] Fix Leaflet _getIconUrl issue in MapView.tsx
  [X] Add Suspense boundary to kart/page.tsx
  [X] Update MapSearchBar component props

### Current Progress
- Clerk.js package updated to latest version 6.12.2
- Build cache has been cleared
- Added missing "message" column to rental_requests table
- Fixed Next.js 15 dynamic parameters in all API routes:
  - Changed route handler params to use Promise type: `{ params }: { params: Promise<{ requestId: string }> }`
  - Using `await params` to access parameter values: `const { requestId } = await params`
- Fixed WebSocket route handler by:
  - Moving `sendToUser` and `broadcast` functions to a separate utility file
  - Refactoring the WebSocket connection handling
  - Updated getAuth() call to pass request parameter
- Fixed TypeScript errors:
  - Added missing `id` property in ListingPageClient.tsx
  - Added proper type checking for error handling in map-search/route.ts
  - Fixed null checks for rowCount in SQL results
  - Updated framer-motion types in AnimatedSection.tsx
  - Added explicit types to event handlers in ListingGallery.tsx
  - Fixed schema-dts types in ListingSchema component
  - Updated react-datepicker with correct type for selectsRange onChange handler
  - Fixed Leaflet marker icon issue in MapView.tsx
  - Added Suspense boundary to kart/page.tsx for useSearchParams
  - Updated imported icons from lucide-react (Bicycle -> Bike)
  - Fixed props in MapSearchBar component
- Successfully completed the build process
- Still need to fix database connection issue