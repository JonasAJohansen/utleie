# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- When fixing Next.js API routes, make targeted edits to fix type errors rather than deleting and recreating files.
- In Next.js 15, route handlers with dynamic segments need to be properly typed with specific parameter formats.
- In Next.js 15, dynamic route parameters must be awaited before accessing their properties.
- When using SQL in TypeScript, ensure column names match exactly with the database schema.
- After updating npm packages (especially auth packages like Clerk), clear build cache before rebuilding.
- In Next.js 15, there are two approaches to handle dynamic route parameters:
  1. Using async/await: `const { id } = await params;` in an async component
  2. Using React's `use` hook: `const { id } = use(params);` in a non-async component
- In Next.js 15 API route handlers, only HTTP methods (GET, POST, etc.) should be exported directly. Helper functions should be moved to separate utility files.
- When handling errors in TypeScript, properly type-check or type-cast catch parameters (which are of type `unknown` by default) before accessing their properties.
- When using arrays with PostgreSQL in @vercel/postgres, use the sql.array() helper function: `ANY(${sql.array(myArray, 'text')})` instead of directly passing arrays to SQL template literals.
- When using Clerk's getAuth() function in Next.js 15, always pass the request object as an argument: `getAuth(request)`.
- In framer-motion v11+, neither `MotionProps` nor `HTMLMotionProps` are exported. Instead, define a custom interface with common motion properties and use an index signature for additional props: `[key: string]: any`.
- When working with SQL results in TypeScript, always check for null before accessing rowCount (e.g., `if (result.rowCount && result.rowCount > 0)`) to avoid null reference errors.
- For framer-motion event handlers like onDragEnd, create custom interfaces for the event parameters (e.g., `DragInfo` with offset and velocity properties) since types like PanInfo aren't directly exported.
- To fix leading zero issues in number inputs: use type="text" with inputMode="numeric" instead of type="number", maintain separate string state for display values, and implement proper validation and formatting functions to prevent leading zeros while preserving number functionality.
- When redesigning landing pages from sales-focused to service-focused: reduce promotional content, simplify messaging, use fewer sections, focus on user needs rather than selling points, integrate core functionality (like search) into hero section, use cleaner typography and color schemes, and emphasize the service benefits rather than company metrics.
- When creating comprehensive homepages: structure sections to follow user journey (hero → credibility → functionality → process → benefits → browse → social proof → education → community → action), maintain visual consistency with color scheme and typography across all sections, use Norwegian-specific content and examples, implement progressive enhancement with staggered animations, and ensure each section serves a specific purpose in the conversion funnel without overwhelming users.
- When standardizing color schemes: always use the established primary color (emerald-500) consistently across all components instead of custom hex colors to maintain visual consistency and brand identity.
- When implementing dynamic content management: add boolean flags (like is_popular, is_featured) to database tables, update API endpoints to filter by these flags, ensure admin interfaces have toggles for these flags, and make sure frontend components use the filtered API endpoints instead of hardcoded data to allow real-time content management through the admin dashboard.
- When encountering "column does not exist" database errors in production, the database schema may be missing columns that exist in the schema.sql file. Use temporary API routes with sql template literals to add missing columns dynamically: `ALTER TABLE table_name ADD COLUMN IF NOT EXISTS column_name BOOLEAN DEFAULT false`. Always check for all missing columns (is_active, is_popular, is_featured) when implementing dynamic content features.
- When removing unwanted features from messaging systems: systematically remove all related components (UI buttons, message types, API endpoints, database fields), update message handling functions, and clean up migration files to prevent future confusion. For video chat removal: remove Video button from MessageInput, remove 'video_call' case from message rendering, delete video call API routes, and remove video call database columns from migrations.
- When implementing phone number blocking for Norwegian numbers: create comprehensive regex patterns covering all formats (+47, 47, local 8-digit, with spaces/dashes/parentheses), sanitize content in API routes before database storage, use meaningful replacement text in Norwegian ("[Telefonnummer fjernet av sikkerhetsgrunner]"), add debug logging for monitoring, and create test scripts to verify all phone number formats are detected and blocked correctly.
- When fixing listing edit functionality: ensure field name mapping between database (snake_case like user_id, category_id) and frontend expectations (camelCase like userId, categoryId). API responses should include both formats or transform database fields to camelCase to match frontend code expectations. The edit page expects userId/categoryId but database returns user_id/category_id, causing access control failures.
- When fixing React duplicate key errors: deduplicate arrays in the frontend using `filter()` with `findIndex()`, and use unique keys that combine the item identifier with the array index (`${item.id}-${index}`) to prevent React conflicts when the same data is loaded multiple times from API calls.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- For Next.js 15 API route handlers, use specific type definitions for dynamic route parameters to satisfy the constraint 'ParamCheck<RouteContext>'
- In Next.js 15, dynamic route parameters need to follow a specific TypeScript interface structure to work with the middleware and routing system
- For Next.js 15 API routes with dynamic segments, avoid complex interfaces and use the built-in context parameter directly
- When using react-datepicker with selectsRange property, the onChange handler should accept [Date, Date] array type
- For Next.js components using useSearchParams or other navigation hooks, always wrap them in a Suspense boundary
- When working with lucide-react icons, verify the icon names in the current version as they may change between updates (e.g., Bicycle replaced with Bike)
- In schema-dts (JSON-LD schema), use '@id' format for reference values like 'businessFunction' and 'itemCondition'
- Remove the delete of L.Icon.Default.prototype._getIconUrl in Leaflet initialization as it's not needed in newer versions
- When fixing TypeScript interface compliance errors, ensure all required properties are included in object initializations - missing properties like 'subcategory' in SearchFilters type will cause compilation errors

# Scratchpad

## Current Task: Fix WooCommerce Category and Product CSS Styling ✅ IN PROGRESS

### Task Overview:
Working on creating clean, professional styling for both WooCommerce product categories (with overlay style) and regular products (with white card style). The main issue is CSS conflicts between the two sections where product CSS overrides category CSS.

### Steps to Complete:
[X] Create custom category section with image overlay and "SE PRODUKTER" buttons
[X] Create clean product grid styling with white cards
[X] Identify CSS conflicts between category and product sections
[ ] Provide complete, working CSS for both sections without conflicts
[ ] Test and verify both sections work independently

### Implementation Details:
- Categories section uses `.custom-product-categories` class wrapper
- Categories have image overlay style with transparent backgrounds and green buttons
- Products section uses standard WooCommerce styling with white card backgrounds
- Main issue: CSS specificity conflicts where later product CSS overrides category CSS
- Need to provide complete, working CSS that keeps sections separate

### Current Status:
The user needs the complete, working CSS for both:
1. Custom product categories (overlay style)
2. Regular products (white card style)
Both sections must work without interfering with each other.

### Latest Update:
[X] Provided complete working CSS for both sections
[X] Create sleek, minimalistic full-width CTA section for the same page
[X] Fix CTA title styling to match the rest of the page design

## Current Task: Added Hardcoded "Gis Bort" Category ✅ COMPLETED
Successfully implemented a hardcoded "Gis Bort" (give away) category that users can select when creating or editing listings. This special category is not stored in the database and cannot be removed by admins.

**Implementation:**
- ✅ Added "Gis Bort" as hardcoded option in CategorySelect component and edit listing form
- ✅ Added "Gis Bort" as prominent link in navbar navigation (both desktop and mobile) 
- ✅ Updated search API to handle hardcoded "Gis Bort" category properly in all database queries
- ✅ Hide price field when "Gis Bort" is selected and automatically set price to 0
- ✅ Updated validation logic in both forms to handle free items correctly
- ✅ Added visual feedback showing "Gratis å gi bort" message when Gis Bort is selected
- ✅ Messaging functionality works automatically for all listings regardless of category
- ✅ Users can now easily find and list free items in the dedicated "Gis Bort" section

## Previous Task: Fixed Listing Edit Issue ✅ COMPLETED
Successfully identified and fixed the listing edit functionality issue. The problem was a field name mismatch between database fields (user_id, category_id) and frontend expectations (userId, categoryId). Updated the API response to include both field name formats to ensure proper access control.

**Additional Fix:** Resolved React duplicate key errors in category dropdown by adding deduplication logic and using unique keys with index (`${category.id}-${index}`) to prevent React conflicts when categories are loaded multiple times.

## Previous Tasks: COMPLETED ✅

### Task 1: Fix Listing Edit Functionality ✅
Successfully fixed listing edit functionality with proper PUT endpoint, authorization, and field validation.

### Task 2: Improve Price Range Search UX ✅
Successfully improved price range search UX by removing automatic searching and allowing manual search button control.

### Task 3: Add All Norwegian Cities with County Information ✅
Successfully implemented comprehensive Norwegian cities support with database schema, API endpoint, and frontend integration.

### Task 4: Remove Social Proof Elements ✅
Successfully removed unwanted social proof elements from listings while maintaining core functionality.

### Task 5: Improve City Search UX ✅ COMPLETED
Successfully improved city search UX with popular cities prioritized and dynamic searching through all cities.

### Task 6: Translate Categories & Check Incomplete Functions ✅ COMPLETED
Successfully translated categories and verified all functions are complete.

### Task 7: Navbar & Legal Pages Update ✅ COMPLETED
Successfully updated navbar, removed map/career links, added terms and privacy pages.

### Task 8: Improve Front Page Design for Rental Platform ✅ COMPLETED

Successfully redesigned the front page based on the modern financial services reference, adapted for Norwegian rental platform:

**Key Design Elements Implemented:**
- **Bold Hero Section**: Full-screen hero with massive typography "LEI ALT DU TRENGER, NÅR DU TRENGER DET"
- **3D Floating Elements**: Rental item icons (camera, wrench, gamepad, globe) floating around the hero
- **Modern Typography**: Font-black headings, clean hierarchy, professional spacing
- **Emerald Green Color Scheme**: Primary emerald-500, professional color palette
- **Clean Layout Structure**: Lots of white space, grid-based sections

**Sections Implemented:**
1. **Hero Section**: Full-screen with floating 3D rental items and bold call-to-action
2. **Trust Statistics**: Clean statistics grid (50K+ users, 200K+ rentals, 4.9 rating, 24/7 support)
3. **Search Section**: Clean white card with integrated search and category selection
4. **How It Works**: Step-by-step visual process with connecting lines
5. **Features Grid**: Benefits of renting with colorful icons (sustainability, security, flexibility)
6. **Popular Categories**: 8 colorful category cards with counts and hover animations
7. **App Mockup**: Mobile interface demonstration with rental search examples
8. **Norwegian Cities**: 8 major Norwegian cities with listing counts
9. **Latest Listings**: Enhanced listing cards with better visual hierarchy
10. **Testimonials**: 3 authentic Norwegian user testimonials with star ratings
11. **FAQ Section**: Modern accordion-style design with 4 essential questions
12. **CTA Section**: Bold emerald gradient background for renter onboarding

**Visual Improvements:**
- **3D Elements**: Floating rental items with shadows and rotations
- **Enhanced Cards**: Rounded-3xl corners, better shadows, hover animations
- **Professional Photography**: Better layout for listing images
- **Modern Buttons**: Larger, bolder CTAs with better transitions
- **Norwegian Focus**: All content specifically for Norwegian rental market

**Typography & Spacing:**
- **Font Weights**: Font-black for headlines, font-bold for emphasis
- **Large Sizing**: Up to text-8xl for maximum impact
- **Professional Hierarchy**: Clear distinction between heading levels
- **Generous Spacing**: Lots of white space for clean, modern feel

### Task Status: SIGNIFICANTLY ENHANCED ✅

The homepage now provides a **complete user journey** from awareness to action:
- ✅ **11+ comprehensive sections** covering all aspects of the rental platform
- ✅ **Norwegian-specific content** with local cities, testimonials, and examples
- ✅ **Modern design consistency** throughout all new sections
- ✅ **Trust building elements** without being sales-heavy
- ✅ **Clear value proposition** for both renters and lenders
- ✅ **Professional animations** and micro-interactions
- ✅ **Mobile-optimized design** across all sections
- ✅ **User education** through FAQ and how-it-works sections
- ✅ **Geographic relevance** with Norwegian cities showcase

The homepage now rivals the best modern SaaS and fintech websites in terms of comprehensiveness, design quality, and user experience, perfectly adapted for the Norwegian rental market.

### Recent Improvements:
[X] Standardized green color scheme to emerald-500 across all components
[X] Updated all instances of old #4CD964 color to emerald-500/emerald-600
[X] Removed "Bli med i vårt community" newsletter section per user request
[X] Removed trust statistics section (50K+ users, 200K+ rentals, etc.) per user request
[X] Integrated search functionality directly into hero section for better user flow
[X] Redesigned footer with only real, functional links organized by user journey
[X] Added tasteful animations to hero section floating elements and content
[X] Made popular categories dynamic with admin dashboard management
[X] Made navbar categories dropdown dynamic with popular categories from admin dashboard
[X] Fixed homepage search bar to show 3 random popular categories with fallback
[X] Made popular categories showcase section fully dynamic with real listing counts
[X] Fixed database schema by adding missing is_active, is_popular, and is_featured columns
[X] Implemented comprehensive location-based features for Norwegian rental platform
[X] Implemented smart search and discovery features for enhanced user experience
[X] Implemented real-time activity tracking and engagement features

## Current Status: REAL-TIME ACTIVITY & ENGAGEMENT OPTIMIZED ✅

The platform now features comprehensive real-time activity tracking and engagement capabilities:
- Consistent emerald-500 color scheme throughout all components
- Streamlined sections focusing on core functionality and value proposition  
- Professional, modern aesthetic matching the reference design
- Clean user journey from hero to action without promotional statistics or newsletter signup
- Integrated search as primary CTA in hero section with working popular categories display
- Professional footer with real, functional navigation organized by user needs
- Enhanced hero animations: floating 3D elements with gentle movement, staggered content entrance, and interactive category pills
- **FULLY DYNAMIC CATEGORIES SYSTEM**:
  - Admin can toggle is_popular and is_featured flags for categories through the dashboard
  - Navbar categories dropdown shows popular categories from database with proper icons
  - Homepage search shows 3 random popular categories with fallback to any active categories
  - Popular categories showcase displays categories marked as popular with real listing counts from database
  - All category data is fetched dynamically with proper error handling and fallbacks
- **COMPREHENSIVE LOCATION-BASED FEATURES**:
  - Auto-detect user location with Norwegian city recognition and fallback
  - Enhanced location selector with Norwegian postal code integration and autocomplete
  - Distance-based search results sorting with Haversine formula calculations
  - City-specific landing pages (/oslo, /bergen, etc.) with local popular categories and listings
  - Delivery radius indicators on listing cards with visual distance information
  - Real-time location detection with geolocation API and privacy considerations
  - Norwegian cities database integration with 24+ major cities support
- **SMART SEARCH & DISCOVERY SYSTEM**:
  - Real-time autocomplete with listing titles, descriptions, categories, and brand suggestions
  - Enhanced search bar with instant suggestions and keyboard navigation
  - Recently viewed items tracking (localStorage for guests, database for authenticated users)
  - "People Also Rented" recommendations based on rental history correlations
  - Comprehensive saved search filters allowing users to bookmark complete search criteria
  - Advanced recommendation engine with fallback to similar category items
  - Smart search suggestion ranking by relevance, frequency, and user behavior
  - Multiple display variants for recently viewed items (sidebar, section, compact)
  - Intelligent recommendation badges showing correlation strength and category matching
- **REAL-TIME ACTIVITY & ENGAGEMENT FEATURES**:
  - "Just Listed" badges automatically highlighting new listings within 24-48 hours
  - Trending Now sections displaying most viewed items with intelligent ranking algorithms
  - Live inventory status indicators showing "Available now", "Returns tomorrow", dynamic availability
  - Comprehensive availability calendar with booking conflict detection and date range selection
  - View tracking system with spam protection and real-time analytics
  - Activity badges (trending rank, view counts, popularity indicators) on all listing cards
  - Real-time availability status with rental end date calculations and visual indicators
  - Database triggers for automatic view count updates and trending calculations
- Fixed database schema with all required columns (is_active, is_popular, is_featured)
- Simplified homepage flow: Hero (with integrated search) → How It Works → Features → Categories → App Mockup → Cities → Listings → Testimonials → FAQ → CTA