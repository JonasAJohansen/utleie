# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- When fixing Next.js API routes, make targeted edits to fix type errors rather than deleting and recreating files.
- In Next.js 15, route handlers with dynamic segments need to be properly typed with specific parameter formats.
- In Next.js 15, dynamic route parameters must be awaited before accessing their properties.
- When using SQL in TypeScript, ensure column names match exactly with the database schema.
- After updating npm packages (especially auth packages like Clerk), clear build cache before rebuilding.
- In Next.js 15, there are two approaches to handle dynamic route parameters:
  1. Using async/await: `const { id } = await params;` in an async component
  2. Using React's `use` hook: `const { id } = use(params);` in a non-async component
- In Next.js 15 API route handlers, only HTTP methods (GET, POST, etc.) should be exported directly. Helper functions should be moved to separate utility files.
- When handling errors in TypeScript, properly type-check or type-cast catch parameters (which are of type `unknown` by default) before accessing their properties.
- When using arrays with PostgreSQL in @vercel/postgres, use the sql.array() helper function: `ANY(${sql.array(myArray, 'text')})` instead of directly passing arrays to SQL template literals.
- When using Clerk's getAuth() function in Next.js 15, always pass the request object as an argument: `getAuth(request)`.
- In framer-motion v11+, neither `MotionProps` nor `HTMLMotionProps` are exported. Instead, define a custom interface with common motion properties and use an index signature for additional props: `[key: string]: any`.
- When working with SQL results in TypeScript, always check for null before accessing rowCount (e.g., `if (result.rowCount && result.rowCount > 0)`) to avoid null reference errors.
- For framer-motion event handlers like onDragEnd, create custom interfaces for the event parameters (e.g., `DragInfo` with offset and velocity properties) since types like PanInfo aren't directly exported.
- To fix leading zero issues in number inputs: use type="text" with inputMode="numeric" instead of type="number", maintain separate string state for display values, and implement proper validation and formatting functions to prevent leading zeros while preserving number functionality.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- For Next.js 15 API route handlers, use specific type definitions for dynamic route parameters to satisfy the constraint 'ParamCheck<RouteContext>'
- In Next.js 15, dynamic route parameters need to follow a specific TypeScript interface structure to work with the middleware and routing system
- For Next.js 15 API routes with dynamic segments, avoid complex interfaces and use the built-in context parameter directly
- When using react-datepicker with selectsRange property, the onChange handler should accept [Date, Date] array type
- For Next.js components using useSearchParams or other navigation hooks, always wrap them in a Suspense boundary
- When working with lucide-react icons, verify the icon names in the current version as they may change between updates (e.g., Bicycle replaced with Bike)
- In schema-dts (JSON-LD schema), use '@id' format for reference values like 'businessFunction' and 'itemCondition'
- Remove the delete of L.Icon.Default.prototype._getIconUrl in Leaflet initialization as it's not needed in newer versions

# Scratchpad

## Previous Tasks: COMPLETED ✅

### Task 1: Fix Listing Edit Functionality ✅
Successfully fixed listing edit functionality with proper PUT endpoint, authorization, and field validation.

### Task 2: Improve Price Range Search UX ✅
Successfully improved price range search UX by removing automatic searching and allowing manual search button control.

### Task 3: Add All Norwegian Cities with County Information ✅
Successfully implemented comprehensive Norwegian cities support with database schema, API endpoint, and frontend integration.

### Task 4: Remove Social Proof Elements ✅
Successfully removed unwanted social proof elements from listings while maintaining core functionality.

## Current Task: Improve City Search UX ✅ COMPLETED

### Problem Description
User requested two improvements for city search functionality:
1. Show most popular cities at the top of the dropdown
2. Allow searching through ALL cities in the database, not just the limited ones shown initially

### Analysis
The current implementation had limitations:
- Only showed a limited number of cities (100-200) in dropdowns
- No prioritization of popular/major cities
- Search was limited to pre-loaded cities rather than dynamic searching
- Display showed full information (municipality, county) instead of just city names

### Implementation Plan
[X] Update API endpoint to prioritize popular Norwegian cities
[X] Implement dynamic search that queries all cities in database
[X] Create enhanced SearchableDropdown component with API integration
[X] Add visual indicators for popular cities (star icons)
[X] Update both SearchBar and MapSearchBar to use new functionality
[X] Display only city names as requested (no postal codes or county info)

### Implementation Details
- ✅ **API Enhancement**: Updated `/api/cities/route.ts` to:
  - Define list of 24 most popular Norwegian cities based on population and rental activity
  - Prioritize popular cities at the top of results
  - Support dynamic searching across ALL cities in database (500+ results)
  - Add `isPopular` flag to identify popular cities
  - Display only city names (removed municipality/county from display)

- ✅ **Enhanced SearchableDropdown**: Created new component with:
  - Dynamic API integration with debounced search (300ms delay)
  - Support for both static and dynamic item modes
  - Visual indicators for popular cities (star icons)
  - Loading states and error handling
  - Keyboard navigation support
  - Proper accessibility attributes

- ✅ **Frontend Updates**: Updated both SearchBar and MapSearchBar to:
  - Use new SearchableDropdown with API endpoint
  - Remove old static city loading logic
  - Support searching through all Norwegian cities
  - Show popular cities with star indicators
  - Display only city names as requested

### Technical Improvements
- **Popular Cities**: Oslo, Bergen, Trondheim, Stavanger, Kristiansand, Fredrikstad, Sandnes, Tromsø, Drammen, Asker, Lillestrøm, Halden, Bodø, Molde, Arendal, Haugesund, Tønsberg, Ålesund, Moss, Skien, Hamar, Lillehammer, Sarpsborg, Sandefjord
- **Dynamic Search**: Users can now search through thousands of Norwegian cities in real-time
- **Better UX**: Popular cities appear first with star icons, clean city name display
- **Performance**: Debounced API calls prevent excessive requests while typing

### Task Status: COMPLETED ✅

Successfully improved city search UX with:
- ✅ Popular Norwegian cities prioritized at top with star indicators
- ✅ Dynamic searching through ALL cities in database (not just pre-loaded ones)
- ✅ Clean display showing only city names (no postal codes or county info)
- ✅ Enhanced SearchableDropdown component with API integration
- ✅ Updated both main SearchBar and MapSearchBar components
- ✅ Proper loading states and error handling
- ✅ Debounced search to optimize performance

Users can now:
- See popular cities at the top of the dropdown with star icons
- Search through thousands of Norwegian cities dynamically
- See clean city name display without extra information
- Experience smooth search performance with proper loading states

The implementation provides a much better user experience for location selection with comprehensive city coverage and intelligent prioritization.